name: Build APK and Create Release

on:
  push:
    branches:
      - 'release/*'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Load google-services.json and local.properties from the secrets
      - name: Decode secrets
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
          LOCAL_PROPERTIES: ${{ secrets.LOCAL_PROPERTIES }}
        run: |
          if [ -n "$GOOGLE_SERVICES" ]; then
            echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json
          else
            echo "::warning::GOOGLE_SERVICES secret not set."
          fi

          if [ -n "$LOCAL_PROPERTIES" ]; then
            echo "$LOCAL_PROPERTIES" | base64 --decode > ./local.properties
          else
            echo "::warning::LOCAL_PROPERTIES secret not set."
          fi

      # Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Clean and build release APK(s)
      - name: Build Release APK
        run: ./gradlew clean assembleRelease

      # Upload all APKs in release folder as artifact
      - name: Upload APKs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: app/build/outputs/apk/release/*.apk

      # Extract release name and tag from branch
      - name: Extract release name and tag
        id: extract
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/release/}
          if [[ "$BRANCH_NAME" =~ ^(.+)-(.+)$ ]]; then
            RELEASE_NAME=${BASH_REMATCH[1]}
            TAG_NAME=${BASH_REMATCH[2]}
            echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
            echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          else
            echo "Error: Branch name format should be 'release/NAME-TAG'"
            echo "Received: $BRANCH_NAME"
            exit 1
          fi

      # Create and push tag only if it doesn't exist
      - name: Create and push tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if tag exists locally or remotely
          if git ls-remote --tags origin "refs/tags/$TAG_NAME" | grep -q "$TAG_NAME"; then
            echo "Tag $TAG_NAME already exists on remote, skipping"
          elif git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists locally, pushing to remote"
            git push origin "$TAG_NAME"
          else
            echo "Creating new tag: $TAG_NAME"
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create GitHub release and attach APK(s)
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.RELEASE_NAME }}
          files: app/build/outputs/apk/release/*.apk
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
